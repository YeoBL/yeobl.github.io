from base64 import b64encode, b64decode
def C(text):
    return ''.join([chr((ord(ch) + 7) % 256) for ch in text])

def C_inv(text):
    return ''.join([chr((ord(ch) - 7) % 256) for ch in text])

def B(text):
    return b64encode(text.encode('ascii')).decode()

def B_inv(text):
    return b64decode(text.encode('ascii')).decode()

def R(text):
    return text[::-1]

def R_inv(text):
    return text[::-1]

def S(text):
    return ''.join([text[i:i+2][::-1] for i in range(0, len(text), 2)])

def S_inv(text):
    return ''.join([text[i:i+2][::-1] for i in range(0, len(text), 2)])

def X(text):
    return ','.join(str(255 - ord(ch))for ch in text)

def X_inv(text):
    return ''.join([chr(255 - int(tmp)) for tmp in text.split(',')])

def adj_ch(ch):
    pos = ord(ch)
    return chr(pos - 1) + chr(pos) + chr(pos + 1)

def O(text):
    return ''.join([adj_ch(ch) for ch in text])

def O_inv(text):
    return ''.join([text[idx] for idx in range(1, len(text), 3)])

text = "Double, double, toil and trouble. Fire burn and cauldron bubble!"
c3 = 'YwzA5ywzA5~5vy5wzC5[~z5w5vy5xvy5wwwz6'
b3 = 'VWtjNU1WbHRlR3hNUTBKcllqTldhV0pIVlhOSlNGSjJZVmQzWjFsWE5XdEpTRko1WWpOV2FXSkhWWFZKUlZwd1kyMVZaMWx1Vm5saWFVSm9ZbTFSWjFreVJqRmlSMUo1WWpJMFoxbHVWbWxaYlhoc1NWRTlQUT09'
r3 = '!elbbub nordluac dna nrub eriF .elbuort dna liot ,elbuod ,elbuoD'
s3 = 'oDbuel ,odbuel ,otlia dnt orbuel .iFerb ru nna daclurdnob bulb!e'
x3 = '205,207,201,211,206,198,198,211,205,207,207,211,205,206,206,211,205,207,201,211,205,207,204,211,205,207,204,211,205,206,206,211,205,207,201,211,205,207,203,211,206,198,198,211,205,206,206,211,205,207,201,211,205,207,205,211,205,207,207,211,205,206,206,211,205,207,201,211,205,207,204,211,205,207,207,211,205,206,206,211,205,207,201,211,205,207,205,211,205,207,204,211,205,206,206,211,205,207,202,211,205,207,201,211,205,207,201,211,205,206,206,211,205,207,202,211,205,207,202,211,205,207,203,211,205,206,206,211,205,207,201,211,205,207,205,211,205,207,205,211,205,206,206,211,205,207,201,211,205,207,204,211,205,207,204,211,205,206,206,211,205,207,201,211,205,207,203,211,206,198,198,211,205,206,206,211,205,207,201,211,205,207,205,211,205,207,207,211,205,206,206,211,205,207,201,211,205,207,204,211,205,207,207,211,205,206,206,211,205,207,201,211,205,207,205,211,205,207,204,211,205,206,206,211,205,207,202,211,205,207,201,211,205,207,201,211,205,206,206,211,205,207,202,211,205,207,202,211,205,207,203,211,205,206,206,211,205,207,201,211,205,207,203,211,206,198,199,211,205,206,206,211,205,207,201,211,205,207,204,211,205,207,204,211,205,206,206,211,205,207,201,211,205,207,205,211,205,207,200,211,205,206,206,211,205,207,201,211,205,207,204,211,205,207,207,211,205,206,206,211,205,207,202,211,205,207,202,211,205,207,203,211,205,206,206,211,205,207,201,211,205,207,205,211,206,198,198,211,205,206,206,211,205,207,201,211,205,207,204,211,205,207,205,211,205,206,206,211,205,207,201,211,205,207,205,211,205,207,205,211,205,206,206,211,205,207,202,211,205,207,202,211,205,207,203,211,205,206,206,211,205,207,201,211,205,207,203,211,206,198,199,211,205,206,206,211,205,207,201,211,205,207,204,211,205,207,201,211,205,206,206,211,205,207,201,211,205,207,204,211,205,207,204,211,205,206,206,211,205,207,201,211,205,207,203,211,206,198,198,211,205,206,206,211,205,207,201,211,205,207,205,211,205,207,207,211,205,206,206,211,205,207,201,211,205,207,204,211,205,207,207,211,205,206,206,211,205,207,201,211,205,207,205,211,205,207,204,211,205,206,206,211,205,207,202,211,205,207,200,211,206,198,199,211,205,206,206,211,205,207,202,211,205,207,202,211,205,207,203,211,205,206,206,211,205,207,201,211,206,198,198,211,205,207,205,211,205,206,206,211,205,207,201,211,205,207,205,211,205,207,200,211,205,206,206,211,205,207,201,211,205,207,204,211,205,207,201,211,205,206,206,211,205,207,201,211,205,207,205,211,205,207,204,211,205,206,206,211,205,207,202,211,205,207,202,211,205,207,203,211,205,206,206,211,205,207,201,211,205,207,205,211,205,207,207,211,205,206,206,211,205,207,201,211,205,207,203,211,206,198,198,211,205,206,206,211,205,207,201,211,205,207,204,211,205,207,201,211,205,206,206,211,205,207,201,211,205,207,204,211,205,207,205,211,205,206,206,211,205,207,202,211,205,207,202,211,205,207,203,211,205,206,206,211,205,207,201,211,205,207,205,211,206,198,198,211,205,206,206,211,205,207,201,211,205,207,204,211,205,207,205,211,205,206,206,211,205,207,201,211,205,207,205,211,205,207,205,211,205,206,206,211,205,207,202,211,205,207,202,211,205,207,203,211,205,206,206,211,205,207,201,211,205,207,205,211,205,207,206,211,205,206,206,211,205,207,201,211,205,207,205,211,206,198,198,211,205,206,206,211,205,207,201,211,205,207,203,211,206,198,198,211,205,206,206,211,205,207,201,211,205,207,204,211,205,207,207,211,205,206,206,211,205,207,201,211,205,207,205,211,205,207,205,211,205,206,206,211,205,207,201,211,205,207,204,211,205,207,201,211,205,206,206,211,205,207,201,211,205,207,204,211,205,207,204,211,205,206,206,211,205,207,201,211,205,207,204,211,205,207,205,211,205,206,206,211,205,207,202,211,205,207,202,211,205,207,203,211,205,206,206,211,205,207,201,211,205,207,205,211,205,207,207,211,205,206,206,211,205,207,201,211,205,207,203,211,206,198,198,211,205,206,206,211,205,207,201,211,205,207,205,211,205,207,207,211,205,206,206,211,205,207,201,211,205,207,205,211,205,207,207,211,205,206,206,211,205,207,201,211,205,207,204,211,205,207,207,211,205,206,206,211,205,207,201,211,205,207,205,211,205,207,204,211,205,206,206,211,205,207,202,211,205,207,202,211,205,207,202'
o3 = 'ABCBCDCDEBCDCDEDEFCDEDEFEFGlmnmnonopmnonopopqnopopqpqrrststutuvstutuvuvwtuvuvwvwx_`a`ababc`ababcbcdabcbcdcdeijkjklklmjklklmlmnklmlmnmnobcdcdedefcdedefefgdefefgfgh)*+*+,+,-*+,+,-,-.+,-,-.-./  !  ! !" ! !"!"#abcbcdcdebcdcdedefcdedefefglmnmnonopmnonopopqnopopqpqrrststutuvstutuvuvwtuvuvwvwx_`a`ababc`ababcbcdabcbcdcdeijkjklklmjklklmlmnklmlmnmnobcdcdedefcdedefefgdefefgfgh)*+*+,+,-*+,+,-,-.+,-,-.-./  !  ! !" ! !"!"#qrsrststurststutuvstutuvuvwlmnmnonopmnonopopqnopopqpqrfghghihijghihijijkhijijkjklijkjklklmjklklmlmnklmlmnmno  !  ! !" ! !"!"#^_`_`a`ab_`a`ababc`ababcbcdklmlmnmnolmnmnonopmnonopopqabcbcdcdebcdcdedefcdedefefg  !  ! !" ! !"!"#qrsrststurststutuvstutuvuvwopqpqrqrspqrqrsrstqrsrststulmnmnonopmnonopopqnopopqpqrrststutuvstutuvuvwtuvuvwvwx_`a`ababc`ababcbcdabcbcdcdeijkjklklmjklklmlmnklmlmnmnobcdcdedefcdedefefgdefefgfgh+,-,-.-./,-.-././0-././0/01  !  ! !" ! !"!"#CDEDEFEFGDEFEFGFGHEFGFGHGHIfghghihijghihijijkhijijkjklopqpqrqrspqrqrsrstqrsrststubcdcdedefcdedefefgdefefgfgh  !  ! !" ! !"!"#_`a`ababc`ababcbcdabcbcdcderststutuvstutuvuvwtuvuvwvwxopqpqrqrspqrqrsrstqrsrststuklmlmnmnolmnmnonopmnonopopq  !  ! !" ! !"!"#^_`_`a`ab_`a`ababc`ababcbcdklmlmnmnolmnmnonopmnonopopqabcbcdcdebcdcdedefcdedefefg  !  ! !" ! !"!"#`ababcbcdabcbcdcdebcdcdedef^_`_`a`ab_`a`ababc`ababcbcdrststutuvstutuvuvwtuvuvwvwxijkjklklmjklklmlmnklmlmnmnoabcbcdcdebcdcdedefcdedefefgopqpqrqrspqrqrsrstqrsrststulmnmnonopmnonopopqnopopqpqrklmlmnmnolmnmnonopmnonopopq  !  ! !" ! !"!"#_`a`ababc`ababcbcdabcbcdcderststutuvstutuvuvwtuvuvwvwx_`a`ababc`ababcbcdabcbcdcde_`a`ababc`ababcbcdabcbcdcdeijkjklklmjklklmlmnklmlmnmnobcdcdedefcdedefefgdefefgfgh  ! !" ! !"!"# !"!"#"#$'
flag_enc = '012678345+,-01289:345+,-012234567+,-012345345+,-01256789:+,-012345012+,-012456234+,-012789234+,-012345789+,-123/01345+,-012456789+,-012789234+,-123/01567+,-012345567+,-012456567+,-123/01456+,-012345345+,-123/01012+,-012456345+,-012567678+,-012456456+,-01289:89:+,-012456123+,-012789678+,-012456678+,-012789789+,-012456456+,-012567789+,-012234456+,-012567456+,-012456345+,-123/01345+,-012234456+,-012345567+,-012678678+,-123/01345+,-012789/01+,-01289:/01+,-012567456+,-012345/01+,-01256789:+,-012345012+,-012678567+,-123/01345+,-01278989:+,-012345567+,-012234567+,-012345345+,-012789123+,-123/01012+,-012678678+,-123/01345+,-012567456+,-123/01345+,-012456123+,-012789345+,-012345012+,-012789789+,-012456567+,-01234589:+,-01289:89:+,-123/01345+,-012567456+,-012345567+,-01289:89:+,-123/01012+,-012456345+,-123/01456+,-012456456+,-012345567+,-012678123+,-012234234+,-012234456+,-012345567+,-012678678+,-123/01567+,-012789012+,-012456123+,-012234567+,-012345345+,-01223489:+,-012678678+,-012678123+,-012345678+,-012345234+,-012678/01+,-012567789+,-012345678'

assert C(C(C(text))) == c3
assert C_inv(C(text)) == text
assert B(B(B(text))) == b3
assert B_inv(B(text)) == text
assert R(R(R(text))) == r3
assert R_inv(R(text)) == text
assert S(S(S(text))) == s3
assert S_inv(S(text)) == text
assert X(X(X(text))) == x3
assert X_inv(X(text)) == text
assert O(O(O(text))) == o3
assert O_inv(O(text)) == text

functions = [C_inv, B_inv, R_inv, S_inv, X_inv, O_inv][::-1]

for func in functions:
    flag_enc = func(flag_enc)

print(flag_enc)